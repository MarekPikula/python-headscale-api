# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: headscale/v1/apikey.proto, headscale/v1/device.proto, headscale/v1/headscale.proto, headscale/v1/machine.proto, headscale/v1/preauthkey.proto, headscale/v1/routes.proto, headscale/v1/user.proto
# plugin: python-betterproto
# This file has been @generated

from typing import TYPE_CHECKING


from pydantic.dataclasses import dataclass

from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class RegisterMethod(betterproto.Enum):
    REGISTER_METHOD_UNSPECIFIED = 0
    REGISTER_METHOD_AUTH_KEY = 1
    REGISTER_METHOD_CLI = 2
    REGISTER_METHOD_OIDC = 3


@dataclass(eq=False, repr=False)
class ApiKey(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    prefix: str = betterproto.string_field(2)
    expiration: datetime = betterproto.message_field(3)
    created_at: datetime = betterproto.message_field(4)
    last_seen: datetime = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CreateApiKeyRequest(betterproto.Message):
    expiration: datetime = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateApiKeyResponse(betterproto.Message):
    api_key: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ExpireApiKeyRequest(betterproto.Message):
    prefix: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ExpireApiKeyResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListApiKeysRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListApiKeysResponse(betterproto.Message):
    api_keys: List["ApiKey"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Latency(betterproto.Message):
    latency_ms: float = betterproto.float_field(1)
    preferred: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ClientSupports(betterproto.Message):
    hair_pinning: bool = betterproto.bool_field(1)
    ipv6: bool = betterproto.bool_field(2)
    pcp: bool = betterproto.bool_field(3)
    pmp: bool = betterproto.bool_field(4)
    udp: bool = betterproto.bool_field(5)
    upnp: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class ClientConnectivity(betterproto.Message):
    endpoints: List[str] = betterproto.string_field(1)
    derp: str = betterproto.string_field(2)
    mapping_varies_by_dest_ip: bool = betterproto.bool_field(3)
    latency: Dict[str, "Latency"] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    client_supports: "ClientSupports" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GetDeviceRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDeviceResponse(betterproto.Message):
    addresses: List[str] = betterproto.string_field(1)
    id: str = betterproto.string_field(2)
    user: str = betterproto.string_field(3)
    name: str = betterproto.string_field(4)
    hostname: str = betterproto.string_field(5)
    client_version: str = betterproto.string_field(6)
    update_available: bool = betterproto.bool_field(7)
    os: str = betterproto.string_field(8)
    created: datetime = betterproto.message_field(9)
    last_seen: datetime = betterproto.message_field(10)
    key_expiry_disabled: bool = betterproto.bool_field(11)
    expires: datetime = betterproto.message_field(12)
    authorized: bool = betterproto.bool_field(13)
    is_external: bool = betterproto.bool_field(14)
    machine_key: str = betterproto.string_field(15)
    node_key: str = betterproto.string_field(16)
    blocks_incoming_connections: bool = betterproto.bool_field(17)
    enabled_routes: List[str] = betterproto.string_field(18)
    advertised_routes: List[str] = betterproto.string_field(19)
    client_connectivity: "ClientConnectivity" = betterproto.message_field(20)


@dataclass(eq=False, repr=False)
class DeleteDeviceRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteDeviceResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetDeviceRoutesRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDeviceRoutesResponse(betterproto.Message):
    enabled_routes: List[str] = betterproto.string_field(1)
    advertised_routes: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EnableDeviceRoutesRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    routes: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EnableDeviceRoutesResponse(betterproto.Message):
    enabled_routes: List[str] = betterproto.string_field(1)
    advertised_routes: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class User(betterproto.Message):
    id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    created_at: datetime = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetUserRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetUserResponse(betterproto.Message):
    user: "User" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateUserRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateUserResponse(betterproto.Message):
    user: "User" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RenameUserRequest(betterproto.Message):
    old_name: str = betterproto.string_field(1)
    new_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RenameUserResponse(betterproto.Message):
    user: "User" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteUserRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteUserResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListUsersRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListUsersResponse(betterproto.Message):
    users: List["User"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PreAuthKey(betterproto.Message):
    user: str = betterproto.string_field(1)
    id: str = betterproto.string_field(2)
    key: str = betterproto.string_field(3)
    reusable: bool = betterproto.bool_field(4)
    ephemeral: bool = betterproto.bool_field(5)
    used: bool = betterproto.bool_field(6)
    expiration: datetime = betterproto.message_field(7)
    created_at: datetime = betterproto.message_field(8)
    acl_tags: List[str] = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class CreatePreAuthKeyRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    reusable: bool = betterproto.bool_field(2)
    ephemeral: bool = betterproto.bool_field(3)
    expiration: datetime = betterproto.message_field(4)
    acl_tags: List[str] = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CreatePreAuthKeyResponse(betterproto.Message):
    pre_auth_key: "PreAuthKey" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ExpirePreAuthKeyRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ExpirePreAuthKeyResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListPreAuthKeysRequest(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListPreAuthKeysResponse(betterproto.Message):
    pre_auth_keys: List["PreAuthKey"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Machine(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    machine_key: str = betterproto.string_field(2)
    node_key: str = betterproto.string_field(3)
    disco_key: str = betterproto.string_field(4)
    ip_addresses: List[str] = betterproto.string_field(5)
    name: str = betterproto.string_field(6)
    user: "User" = betterproto.message_field(7)
    last_seen: datetime = betterproto.message_field(8)
    last_successful_update: datetime = betterproto.message_field(9)
    expiry: datetime = betterproto.message_field(10)
    pre_auth_key: "PreAuthKey" = betterproto.message_field(11)
    created_at: datetime = betterproto.message_field(12)
    register_method: "RegisterMethod" = betterproto.enum_field(13)
    forced_tags: List[str] = betterproto.string_field(18)
    invalid_tags: List[str] = betterproto.string_field(19)
    valid_tags: List[str] = betterproto.string_field(20)
    given_name: str = betterproto.string_field(21)
    online: bool = betterproto.bool_field(22)


@dataclass(eq=False, repr=False)
class RegisterMachineRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RegisterMachineResponse(betterproto.Message):
    machine: "Machine" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetMachineRequest(betterproto.Message):
    machine_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetMachineResponse(betterproto.Message):
    machine: "Machine" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetTagsRequest(betterproto.Message):
    machine_id: int = betterproto.uint64_field(1)
    tags: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetTagsResponse(betterproto.Message):
    machine: "Machine" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteMachineRequest(betterproto.Message):
    machine_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class DeleteMachineResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ExpireMachineRequest(betterproto.Message):
    machine_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class ExpireMachineResponse(betterproto.Message):
    machine: "Machine" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RenameMachineRequest(betterproto.Message):
    machine_id: int = betterproto.uint64_field(1)
    new_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RenameMachineResponse(betterproto.Message):
    machine: "Machine" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListMachinesRequest(betterproto.Message):
    user: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListMachinesResponse(betterproto.Message):
    machines: List["Machine"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MoveMachineRequest(betterproto.Message):
    machine_id: int = betterproto.uint64_field(1)
    user: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MoveMachineResponse(betterproto.Message):
    machine: "Machine" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DebugCreateMachineRequest(betterproto.Message):
    user: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    routes: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class DebugCreateMachineResponse(betterproto.Message):
    machine: "Machine" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Route(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    machine: "Machine" = betterproto.message_field(2)
    prefix: str = betterproto.string_field(3)
    advertised: bool = betterproto.bool_field(4)
    enabled: bool = betterproto.bool_field(5)
    is_primary: bool = betterproto.bool_field(6)
    created_at: datetime = betterproto.message_field(7)
    updated_at: datetime = betterproto.message_field(8)
    deleted_at: datetime = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GetRoutesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRoutesResponse(betterproto.Message):
    routes: List["Route"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EnableRouteRequest(betterproto.Message):
    route_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class EnableRouteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DisableRouteRequest(betterproto.Message):
    route_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class DisableRouteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMachineRoutesRequest(betterproto.Message):
    machine_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetMachineRoutesResponse(betterproto.Message):
    routes: List["Route"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteRouteRequest(betterproto.Message):
    route_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class DeleteRouteResponse(betterproto.Message):
    pass


class HeadscaleServiceStub(betterproto.ServiceStub):
    async def get_user(
        self,
        get_user_request: "GetUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetUserResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/GetUser",
            get_user_request,
            GetUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_user(
        self,
        create_user_request: "CreateUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateUserResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/CreateUser",
            create_user_request,
            CreateUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rename_user(
        self,
        rename_user_request: "RenameUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RenameUserResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/RenameUser",
            rename_user_request,
            RenameUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_user(
        self,
        delete_user_request: "DeleteUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteUserResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/DeleteUser",
            delete_user_request,
            DeleteUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_users(
        self,
        list_users_request: "ListUsersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListUsersResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/ListUsers",
            list_users_request,
            ListUsersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_pre_auth_key(
        self,
        create_pre_auth_key_request: "CreatePreAuthKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreatePreAuthKeyResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/CreatePreAuthKey",
            create_pre_auth_key_request,
            CreatePreAuthKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def expire_pre_auth_key(
        self,
        expire_pre_auth_key_request: "ExpirePreAuthKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExpirePreAuthKeyResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/ExpirePreAuthKey",
            expire_pre_auth_key_request,
            ExpirePreAuthKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_pre_auth_keys(
        self,
        list_pre_auth_keys_request: "ListPreAuthKeysRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListPreAuthKeysResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/ListPreAuthKeys",
            list_pre_auth_keys_request,
            ListPreAuthKeysResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def debug_create_machine(
        self,
        debug_create_machine_request: "DebugCreateMachineRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DebugCreateMachineResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/DebugCreateMachine",
            debug_create_machine_request,
            DebugCreateMachineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_machine(
        self,
        get_machine_request: "GetMachineRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMachineResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/GetMachine",
            get_machine_request,
            GetMachineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_tags(
        self,
        set_tags_request: "SetTagsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SetTagsResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/SetTags",
            set_tags_request,
            SetTagsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register_machine(
        self,
        register_machine_request: "RegisterMachineRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RegisterMachineResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/RegisterMachine",
            register_machine_request,
            RegisterMachineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_machine(
        self,
        delete_machine_request: "DeleteMachineRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteMachineResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/DeleteMachine",
            delete_machine_request,
            DeleteMachineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def expire_machine(
        self,
        expire_machine_request: "ExpireMachineRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExpireMachineResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/ExpireMachine",
            expire_machine_request,
            ExpireMachineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def rename_machine(
        self,
        rename_machine_request: "RenameMachineRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RenameMachineResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/RenameMachine",
            rename_machine_request,
            RenameMachineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_machines(
        self,
        list_machines_request: "ListMachinesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListMachinesResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/ListMachines",
            list_machines_request,
            ListMachinesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def move_machine(
        self,
        move_machine_request: "MoveMachineRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MoveMachineResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/MoveMachine",
            move_machine_request,
            MoveMachineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_routes(
        self,
        get_routes_request: "GetRoutesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRoutesResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/GetRoutes",
            get_routes_request,
            GetRoutesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enable_route(
        self,
        enable_route_request: "EnableRouteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EnableRouteResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/EnableRoute",
            enable_route_request,
            EnableRouteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def disable_route(
        self,
        disable_route_request: "DisableRouteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DisableRouteResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/DisableRoute",
            disable_route_request,
            DisableRouteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_machine_routes(
        self,
        get_machine_routes_request: "GetMachineRoutesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMachineRoutesResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/GetMachineRoutes",
            get_machine_routes_request,
            GetMachineRoutesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_route(
        self,
        delete_route_request: "DeleteRouteRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteRouteResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/DeleteRoute",
            delete_route_request,
            DeleteRouteResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_api_key(
        self,
        create_api_key_request: "CreateApiKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateApiKeyResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/CreateApiKey",
            create_api_key_request,
            CreateApiKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def expire_api_key(
        self,
        expire_api_key_request: "ExpireApiKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExpireApiKeyResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/ExpireApiKey",
            expire_api_key_request,
            ExpireApiKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_api_keys(
        self,
        list_api_keys_request: "ListApiKeysRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListApiKeysResponse":
        return await self._unary_unary(
            "/headscale.v1.HeadscaleService/ListApiKeys",
            list_api_keys_request,
            ListApiKeysResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class HeadscaleServiceBase(ServiceBase):
    async def get_user(self, get_user_request: "GetUserRequest") -> "GetUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_user(
        self, create_user_request: "CreateUserRequest"
    ) -> "CreateUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rename_user(
        self, rename_user_request: "RenameUserRequest"
    ) -> "RenameUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_user(
        self, delete_user_request: "DeleteUserRequest"
    ) -> "DeleteUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_users(
        self, list_users_request: "ListUsersRequest"
    ) -> "ListUsersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_pre_auth_key(
        self, create_pre_auth_key_request: "CreatePreAuthKeyRequest"
    ) -> "CreatePreAuthKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def expire_pre_auth_key(
        self, expire_pre_auth_key_request: "ExpirePreAuthKeyRequest"
    ) -> "ExpirePreAuthKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_pre_auth_keys(
        self, list_pre_auth_keys_request: "ListPreAuthKeysRequest"
    ) -> "ListPreAuthKeysResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def debug_create_machine(
        self, debug_create_machine_request: "DebugCreateMachineRequest"
    ) -> "DebugCreateMachineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_machine(
        self, get_machine_request: "GetMachineRequest"
    ) -> "GetMachineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_tags(self, set_tags_request: "SetTagsRequest") -> "SetTagsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_machine(
        self, register_machine_request: "RegisterMachineRequest"
    ) -> "RegisterMachineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_machine(
        self, delete_machine_request: "DeleteMachineRequest"
    ) -> "DeleteMachineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def expire_machine(
        self, expire_machine_request: "ExpireMachineRequest"
    ) -> "ExpireMachineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rename_machine(
        self, rename_machine_request: "RenameMachineRequest"
    ) -> "RenameMachineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_machines(
        self, list_machines_request: "ListMachinesRequest"
    ) -> "ListMachinesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def move_machine(
        self, move_machine_request: "MoveMachineRequest"
    ) -> "MoveMachineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_routes(
        self, get_routes_request: "GetRoutesRequest"
    ) -> "GetRoutesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enable_route(
        self, enable_route_request: "EnableRouteRequest"
    ) -> "EnableRouteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def disable_route(
        self, disable_route_request: "DisableRouteRequest"
    ) -> "DisableRouteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_machine_routes(
        self, get_machine_routes_request: "GetMachineRoutesRequest"
    ) -> "GetMachineRoutesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_route(
        self, delete_route_request: "DeleteRouteRequest"
    ) -> "DeleteRouteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_api_key(
        self, create_api_key_request: "CreateApiKeyRequest"
    ) -> "CreateApiKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def expire_api_key(
        self, expire_api_key_request: "ExpireApiKeyRequest"
    ) -> "ExpireApiKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_api_keys(
        self, list_api_keys_request: "ListApiKeysRequest"
    ) -> "ListApiKeysResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_user(
        self, stream: "grpclib.server.Stream[GetUserRequest, GetUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user(request)
        await stream.send_message(response)

    async def __rpc_create_user(
        self, stream: "grpclib.server.Stream[CreateUserRequest, CreateUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_user(request)
        await stream.send_message(response)

    async def __rpc_rename_user(
        self, stream: "grpclib.server.Stream[RenameUserRequest, RenameUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.rename_user(request)
        await stream.send_message(response)

    async def __rpc_delete_user(
        self, stream: "grpclib.server.Stream[DeleteUserRequest, DeleteUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_user(request)
        await stream.send_message(response)

    async def __rpc_list_users(
        self, stream: "grpclib.server.Stream[ListUsersRequest, ListUsersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_users(request)
        await stream.send_message(response)

    async def __rpc_create_pre_auth_key(
        self,
        stream: "grpclib.server.Stream[CreatePreAuthKeyRequest, CreatePreAuthKeyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_pre_auth_key(request)
        await stream.send_message(response)

    async def __rpc_expire_pre_auth_key(
        self,
        stream: "grpclib.server.Stream[ExpirePreAuthKeyRequest, ExpirePreAuthKeyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.expire_pre_auth_key(request)
        await stream.send_message(response)

    async def __rpc_list_pre_auth_keys(
        self,
        stream: "grpclib.server.Stream[ListPreAuthKeysRequest, ListPreAuthKeysResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_pre_auth_keys(request)
        await stream.send_message(response)

    async def __rpc_debug_create_machine(
        self,
        stream: "grpclib.server.Stream[DebugCreateMachineRequest, DebugCreateMachineResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.debug_create_machine(request)
        await stream.send_message(response)

    async def __rpc_get_machine(
        self, stream: "grpclib.server.Stream[GetMachineRequest, GetMachineResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_machine(request)
        await stream.send_message(response)

    async def __rpc_set_tags(
        self, stream: "grpclib.server.Stream[SetTagsRequest, SetTagsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_tags(request)
        await stream.send_message(response)

    async def __rpc_register_machine(
        self,
        stream: "grpclib.server.Stream[RegisterMachineRequest, RegisterMachineResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.register_machine(request)
        await stream.send_message(response)

    async def __rpc_delete_machine(
        self,
        stream: "grpclib.server.Stream[DeleteMachineRequest, DeleteMachineResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_machine(request)
        await stream.send_message(response)

    async def __rpc_expire_machine(
        self,
        stream: "grpclib.server.Stream[ExpireMachineRequest, ExpireMachineResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.expire_machine(request)
        await stream.send_message(response)

    async def __rpc_rename_machine(
        self,
        stream: "grpclib.server.Stream[RenameMachineRequest, RenameMachineResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.rename_machine(request)
        await stream.send_message(response)

    async def __rpc_list_machines(
        self, stream: "grpclib.server.Stream[ListMachinesRequest, ListMachinesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_machines(request)
        await stream.send_message(response)

    async def __rpc_move_machine(
        self, stream: "grpclib.server.Stream[MoveMachineRequest, MoveMachineResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.move_machine(request)
        await stream.send_message(response)

    async def __rpc_get_routes(
        self, stream: "grpclib.server.Stream[GetRoutesRequest, GetRoutesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_routes(request)
        await stream.send_message(response)

    async def __rpc_enable_route(
        self, stream: "grpclib.server.Stream[EnableRouteRequest, EnableRouteResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.enable_route(request)
        await stream.send_message(response)

    async def __rpc_disable_route(
        self, stream: "grpclib.server.Stream[DisableRouteRequest, DisableRouteResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.disable_route(request)
        await stream.send_message(response)

    async def __rpc_get_machine_routes(
        self,
        stream: "grpclib.server.Stream[GetMachineRoutesRequest, GetMachineRoutesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_machine_routes(request)
        await stream.send_message(response)

    async def __rpc_delete_route(
        self, stream: "grpclib.server.Stream[DeleteRouteRequest, DeleteRouteResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_route(request)
        await stream.send_message(response)

    async def __rpc_create_api_key(
        self, stream: "grpclib.server.Stream[CreateApiKeyRequest, CreateApiKeyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_api_key(request)
        await stream.send_message(response)

    async def __rpc_expire_api_key(
        self, stream: "grpclib.server.Stream[ExpireApiKeyRequest, ExpireApiKeyResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.expire_api_key(request)
        await stream.send_message(response)

    async def __rpc_list_api_keys(
        self, stream: "grpclib.server.Stream[ListApiKeysRequest, ListApiKeysResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_api_keys(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/headscale.v1.HeadscaleService/GetUser": grpclib.const.Handler(
                self.__rpc_get_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserRequest,
                GetUserResponse,
            ),
            "/headscale.v1.HeadscaleService/CreateUser": grpclib.const.Handler(
                self.__rpc_create_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateUserRequest,
                CreateUserResponse,
            ),
            "/headscale.v1.HeadscaleService/RenameUser": grpclib.const.Handler(
                self.__rpc_rename_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                RenameUserRequest,
                RenameUserResponse,
            ),
            "/headscale.v1.HeadscaleService/DeleteUser": grpclib.const.Handler(
                self.__rpc_delete_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteUserRequest,
                DeleteUserResponse,
            ),
            "/headscale.v1.HeadscaleService/ListUsers": grpclib.const.Handler(
                self.__rpc_list_users,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListUsersRequest,
                ListUsersResponse,
            ),
            "/headscale.v1.HeadscaleService/CreatePreAuthKey": grpclib.const.Handler(
                self.__rpc_create_pre_auth_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreatePreAuthKeyRequest,
                CreatePreAuthKeyResponse,
            ),
            "/headscale.v1.HeadscaleService/ExpirePreAuthKey": grpclib.const.Handler(
                self.__rpc_expire_pre_auth_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExpirePreAuthKeyRequest,
                ExpirePreAuthKeyResponse,
            ),
            "/headscale.v1.HeadscaleService/ListPreAuthKeys": grpclib.const.Handler(
                self.__rpc_list_pre_auth_keys,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListPreAuthKeysRequest,
                ListPreAuthKeysResponse,
            ),
            "/headscale.v1.HeadscaleService/DebugCreateMachine": grpclib.const.Handler(
                self.__rpc_debug_create_machine,
                grpclib.const.Cardinality.UNARY_UNARY,
                DebugCreateMachineRequest,
                DebugCreateMachineResponse,
            ),
            "/headscale.v1.HeadscaleService/GetMachine": grpclib.const.Handler(
                self.__rpc_get_machine,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMachineRequest,
                GetMachineResponse,
            ),
            "/headscale.v1.HeadscaleService/SetTags": grpclib.const.Handler(
                self.__rpc_set_tags,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetTagsRequest,
                SetTagsResponse,
            ),
            "/headscale.v1.HeadscaleService/RegisterMachine": grpclib.const.Handler(
                self.__rpc_register_machine,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterMachineRequest,
                RegisterMachineResponse,
            ),
            "/headscale.v1.HeadscaleService/DeleteMachine": grpclib.const.Handler(
                self.__rpc_delete_machine,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteMachineRequest,
                DeleteMachineResponse,
            ),
            "/headscale.v1.HeadscaleService/ExpireMachine": grpclib.const.Handler(
                self.__rpc_expire_machine,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExpireMachineRequest,
                ExpireMachineResponse,
            ),
            "/headscale.v1.HeadscaleService/RenameMachine": grpclib.const.Handler(
                self.__rpc_rename_machine,
                grpclib.const.Cardinality.UNARY_UNARY,
                RenameMachineRequest,
                RenameMachineResponse,
            ),
            "/headscale.v1.HeadscaleService/ListMachines": grpclib.const.Handler(
                self.__rpc_list_machines,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListMachinesRequest,
                ListMachinesResponse,
            ),
            "/headscale.v1.HeadscaleService/MoveMachine": grpclib.const.Handler(
                self.__rpc_move_machine,
                grpclib.const.Cardinality.UNARY_UNARY,
                MoveMachineRequest,
                MoveMachineResponse,
            ),
            "/headscale.v1.HeadscaleService/GetRoutes": grpclib.const.Handler(
                self.__rpc_get_routes,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRoutesRequest,
                GetRoutesResponse,
            ),
            "/headscale.v1.HeadscaleService/EnableRoute": grpclib.const.Handler(
                self.__rpc_enable_route,
                grpclib.const.Cardinality.UNARY_UNARY,
                EnableRouteRequest,
                EnableRouteResponse,
            ),
            "/headscale.v1.HeadscaleService/DisableRoute": grpclib.const.Handler(
                self.__rpc_disable_route,
                grpclib.const.Cardinality.UNARY_UNARY,
                DisableRouteRequest,
                DisableRouteResponse,
            ),
            "/headscale.v1.HeadscaleService/GetMachineRoutes": grpclib.const.Handler(
                self.__rpc_get_machine_routes,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMachineRoutesRequest,
                GetMachineRoutesResponse,
            ),
            "/headscale.v1.HeadscaleService/DeleteRoute": grpclib.const.Handler(
                self.__rpc_delete_route,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteRouteRequest,
                DeleteRouteResponse,
            ),
            "/headscale.v1.HeadscaleService/CreateApiKey": grpclib.const.Handler(
                self.__rpc_create_api_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateApiKeyRequest,
                CreateApiKeyResponse,
            ),
            "/headscale.v1.HeadscaleService/ExpireApiKey": grpclib.const.Handler(
                self.__rpc_expire_api_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExpireApiKeyRequest,
                ExpireApiKeyResponse,
            ),
            "/headscale.v1.HeadscaleService/ListApiKeys": grpclib.const.Handler(
                self.__rpc_list_api_keys,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListApiKeysRequest,
                ListApiKeysResponse,
            ),
        }


ApiKey.__pydantic_model__.update_forward_refs()  # type: ignore
CreateApiKeyRequest.__pydantic_model__.update_forward_refs()  # type: ignore
ListApiKeysResponse.__pydantic_model__.update_forward_refs()  # type: ignore
ClientConnectivity.__pydantic_model__.update_forward_refs()  # type: ignore
GetDeviceResponse.__pydantic_model__.update_forward_refs()  # type: ignore
User.__pydantic_model__.update_forward_refs()  # type: ignore
GetUserResponse.__pydantic_model__.update_forward_refs()  # type: ignore
CreateUserResponse.__pydantic_model__.update_forward_refs()  # type: ignore
RenameUserResponse.__pydantic_model__.update_forward_refs()  # type: ignore
ListUsersResponse.__pydantic_model__.update_forward_refs()  # type: ignore
PreAuthKey.__pydantic_model__.update_forward_refs()  # type: ignore
CreatePreAuthKeyRequest.__pydantic_model__.update_forward_refs()  # type: ignore
CreatePreAuthKeyResponse.__pydantic_model__.update_forward_refs()  # type: ignore
ListPreAuthKeysResponse.__pydantic_model__.update_forward_refs()  # type: ignore
Machine.__pydantic_model__.update_forward_refs()  # type: ignore
RegisterMachineResponse.__pydantic_model__.update_forward_refs()  # type: ignore
GetMachineResponse.__pydantic_model__.update_forward_refs()  # type: ignore
SetTagsResponse.__pydantic_model__.update_forward_refs()  # type: ignore
ExpireMachineResponse.__pydantic_model__.update_forward_refs()  # type: ignore
RenameMachineResponse.__pydantic_model__.update_forward_refs()  # type: ignore
ListMachinesResponse.__pydantic_model__.update_forward_refs()  # type: ignore
MoveMachineResponse.__pydantic_model__.update_forward_refs()  # type: ignore
DebugCreateMachineResponse.__pydantic_model__.update_forward_refs()  # type: ignore
Route.__pydantic_model__.update_forward_refs()  # type: ignore
GetRoutesResponse.__pydantic_model__.update_forward_refs()  # type: ignore
GetMachineRoutesResponse.__pydantic_model__.update_forward_refs()  # type: ignore
